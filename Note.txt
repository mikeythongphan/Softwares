Django
gunicorn
psycopg2-binary
redis
django-helpdesk
pandas
xlrd
openpyxl
django-widget-tweaks
django-import-export
docxtpl
xhtml2pdf
django_xhtml2pdf
django-admin-logs
django-auth-ldap==2.1.0
# python-ldap
# python3-ldap
django-session-timeout
djangorestframework
django-cors-headers
-====================================================================================================================================================================
'markdown_deux',  # Required for Knowledgebase item formatting
'bootstrapform', # Required for nicer formatting of forms with the default templates
'corsheaders',
'lwf.apps.LWFConfig',
'import_export',
'django_admin_logs',
'rest_framework',
'rest_framework.authtoken',  # <-- Here
'vnlist.apps.VnlistConfig',
-====================================================================================================================================================================
Django==2.2.12
gunicorn
psycopg2-binary<2.9
redis
django-helpdesk
pandas
xlrd
openpyxl
django-widget-tweaks
django-import-export
docxtpl
xhtml2pdf
django_xhtml2pdf
django-admin-logs
django-auth-ldap==2.1.0
python-ldap
python3-ldap
django-session-timeout
django-preventconcurrentlogins
djangorestframework
#Update 2023-03-19
django-cors-headers
django-markdown-deux
django-bootstrap-form
docx-mailmerge
reportlab==3.6.6
Unidecode
-====================================================================================================================================================================
import { useState } from 'react';
import { Controller } from 'react-hook-form';
import { LocalizationProvider, MobileDatePicker } from "@mui/x-date-pickers";
import { AdapterMoment } from "@mui/x-date-pickers/AdapterMoment";
import { TextField } from '@mui/material';

export const DatePicker = props => {

 const { id, label, control, disabled = false } = props;
 const [date, setDate] = useState(new Date());

 const handleInputChange = (e) => {
  const { name, value, type } = e.target;

  setDate({
   ...date,
   [name]: value
  });
 };

 const convertToEventParam = (name, value) => ({
  target: {
   name,
   value
  }
 });

 return <Controller
  name={id}
  control={control}
  render={({ field }) => (
   <LocalizationProvider dateAdapter={AdapterMoment}>
    <MobileDatePicker
     size="small"
     {...field}
     value={field.value === '' ? null : new Date(field.value)}
     // value={date === '' ? null : new Date(date)}
     id={id}
     label={label}
     className="mt-8 mb-16 mx-8"
     sx={{ height: 20, width: "100%" }}
     fullWidth
     variant="outlined"
     onChange={(date) =>
      handleInputChange(
       convertToEventParam(label, date)
      )
     }
     renderInput={(params) => <TextField {...params} />}
    />
   </LocalizationProvider>
  )}
 />
}
